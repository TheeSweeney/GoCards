Notes

func main() {
	//var card string = "Ace of Spades"
	//^^^long form method alternatively can be:
	// card := "Ace of Spades"

	cards := []string{newCard(), "Ace of Diamonds"}
	cards = append(cards, "Six of Spades")

	/*
		^^^relying on Go compiler to infer that a var with the val "Ave of Spades" will be a string
		only use ':=' when assigning a value to a NEW variable
		after var is initialized it could be reassigned as such
			car = "Five of Diamonds"

		Variables can be initialized and later assigned
			var deckSize int
			deckSize = 53
		Variables can be initialized outside of a function, but cannot be assigned a value.
	*/

	/*
		var - tells go we're creating a variable; card - name of the variable; string - tells compiler that only type string will ever be assigned to this var; Ace of Spades - assign this value to var card

		Go is a statically typed language
			dynamically typed langauge (JS, Ruby, Python) don't care about the type of a variable
			statically typed languages (C++, Java, Go) DO care and will create an error if a variable is assigned a value of a type different to what the variable is initially set as
				main basic data types
					bool
					string
					int - number
					float64 - number with decimal
	*/

	for i, card := range cards {
		fmt.Println(i, card)
	}
}

func newCard() string {
	//go required us to tell it what data type a function will return ^^^
	return "Five of Diamonds"
}
####################################################################################
package main

func main() {
	// cards := []string{newCard(), "Ace of Diamonds"}
	// since I've created the deck type, I can ammend the above line to what is below
	//cards := deck{newCard(), "Ace of Diamonds"}
	//and now that I wrote a newDeck() function, I can again rewrite it as:
	cards := newDeck()

	// hand, remainingDeck := deal(cards, 5)
	// //deal returns 2 seperate values
	// //the first will be assigned to var "hand", the second to var "remainingDeck"

	// hand.print()
	// remainingDeck.print()
	//both 'hand' and 'remainingDeck' are of type 'deck' and so have access to the print function
	// greeting := "Hi there!"
	// fmt.Println(greeting)
	// >"Hi there!"
	// byteGreet := []byte(greeting)
	// fmt.Println(byteGreet)
	// >[72 105 32 116 104 101 114 101 33]

	cards.saveToFile("my_cards")

}

func newCard() string {
	return "Five of Diamonds"
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>deck.go
package main

// import "fmt"
import (
	"fmt"
	"io/ioutil"
	"strings"
)

//to import multiple libraries, instead of writing multiple lines we just place them in parens (no comma separation) after the initial import

//Create a new type of 'deck
//which is a slice of strings

type deck []string

//though not precisely, the above line can be understood as creating a new type that will extend functionality on top of slices (this is an OO understanding of what is going on)

func newDeck() deck {
	//this will not be a receiver function because when this is called we will not already be working with a deck
	cards := deck{}

	cardSuits := []string{"Spades", "Hearts", "Diamonds", "Clubs"}
	cardValues := []string{"Ace", "Two", "Three", "Four"}

	for _, suit := range cardSuits {
		for _, value := range cardValues {
			cards = append(cards, value+"of"+suit)
		}
	}

	// "_" is used above because initially the values were "i" and "j", but we never used them
	// "_" says 'I know there is a variable here, but I really don't care what its value is'

	return cards
}

func (d deck) print() {
	/*
		^^^any variable of type "deck" now has access to "print" method
		(d deck) is referred to as a 'receiver' on a function
			the first part of the receiver "d" is going to be the actual copy of the deck we're working with as it is available in the function
				 so in cards.print(), d == cards
			it serves a similar function to the 'this' keyword in javascript classes
			by convention, it is not the word 'this', but rather a short abbrev that matches the type of the receiver
	*/
	for i, card := range d {
		fmt.Println(i, card)
	}
}

func deal(d deck, handSize int) (deck, deck) {
	//parameters must have their type specified
	//the return values are in parens because we are telling Go that we are returning two values, both of type deck
	return d[:handSize], d[handSize:]
	//above, we are returning two separate return values
}

func (d deck) toString() string {
	return strings.Join([]string(d), ",")
}

func (d deck) saveToFile(filename string) error {
	return ioutil.WriteFile(filename, []byte(d.toString()), 0666) //0666 permissions mean anyone can read/write this file
}
#####################################################################################
Array 
    data structure of fixed length
Slice 
    data structure with more functionality ie can grow/shrink
    every element of a slice must be of the same type
    create a slice with the same syntax as a string but with some added complexity
        
        cards := []string{newCard(), "Ace of Diamonds"}

        after := start with a set of empty brackets, followed immediately by the data type that will be in the slice, and then brackets containing the elements to be found in the slice. Note that in the above example, a string is both created on the fly ("Ace of Diamonds") and created using a function (newCard() - we assume this funtion returns a string)
    To add elements to the cards slice:

        cards = append(cards, "Six of Spades")

        note that append function does not modify the existing slice, but returns a new slice that we are then assigning back to the name "cards"

	A range of a slice can be selected using the syntax	

		sliceName[startIndexIncluding:upToNotIncluding]

		so for the slice [1,2,3,4,5], slice[0:2] would return [1,2]
		slice[:2] === slice[0:2]
		slice[2:] === slice[2, slice.length + 1] ie from position to end of slice
For loops
    for index, card := range cards{
        fmt.PrintIn(card)
    }

    after the "for" keyword, the next var will be assigned to the index of the current element, separated by a comma from the var assigned to the element itself. "range cards" tells the loop that we will be iterating over a slice/array called "cards". The body of the for loop will be run once for each element of the array.
    
    The := is used because technically each time the for loop iterates to the next element, it completely disregards the previous element and essentially starts from scratch. We are no reassigning "index" and "cards" each time, but they are created a new each iteration.

Byte slice	
	a string converted into byte and held within a slice - a computer friendly representation of a string
Type conversion
	used to take one type of value and convert it to another type. syntax
		typeWeWant(valueWeHave)
		[]byte("Hi there!") 
			^ will convert the string "Hi there!" to a byteslice

