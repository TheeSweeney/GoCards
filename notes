Notes

func main() {
	//var card string = "Ace of Spades"
	//^^^long form method alternatively can be:
	// card := "Ace of Spades"

	cards := []string{newCard(), "Ace of Diamonds"}
	cards = append(cards, "Six of Spades")

	/*
		^^^relying on Go compiler to infer that a var with the val "Ave of Spades" will be a string
		only use ':=' when assigning a value to a NEW variable
		after var is initialized it could be reassigned as such
			car = "Five of Diamonds"

		Variables can be initialized and later assigned
			var deckSize int
			deckSize = 53
		Variables can be initialized outside of a function, but cannot be assigned a value.
	*/

	/*
		var - tells go we're creating a variable; card - name of the variable; string - tells compiler that only type string will ever be assigned to this var; Ace of Spades - assign this value to var card

		Go is a statically typed language
			dynamically typed langauge (JS, Ruby, Python) don't care about the type of a variable
			statically typed languages (C++, Java, Go) DO care and will create an error if a variable is assigned a value of a type different to what the variable is initially set as
				main basic data types
					bool
					string
					int - number
					float64 - number with decimal
	*/

	for i, card := range cards {
		fmt.Println(i, card)
	}
}

func newCard() string {
	//go required us to tell it what data type a function will return ^^^
	return "Five of Diamonds"
}

Array 
    data structure of fixed length
Slice 
    data structure with more functionality ie can grow/shrink
    every element of a slice must be of the same type
    create a slice with the same syntax as a string but with some added complexity
        
        cards := []string{newCard(), "Ace of Diamonds"}

        after := start with a set of empty brackets, followed immediately by the data type that will be in the slice, and then brackets containing the elements to be found in the slice. Note that in the above example, a string is both created on the fly ("Ace of Diamonds") and created using a function (newCard() - we assume this funtion returns a string)
    To add elements to the cards slice:

        cards = append(cards, "Six of Spades")

        note that append function does not modify the existing slice, but returns a new slice that we are then assigning back to the name "cards"

For loops
    for index, card := range cards{
        fmt.PrintIn(card)
    }

    after the "for" keyword, the next var will be assigned to the index of the current element, separated by a comma from the var assigned to the element itself. "range cards" tells the loop that we will be iterating over a slice/array called "cards". The body of the for loop will be run once for each element of the array.
    
    The := is used because technically each time the for loop iterates to the next element, it completely disregards the previous element and essentially starts from scratch. We are no reassigning "index" and "cards" each time, but they are created a new each iteration.



