Notes

Array 
    data structure of fixed length
Slice 
    data structure with more functionality ie can grow/shrink
    every element of a slice must be of the same type
    create a slice with the same syntax as a string but with some added complexity
        
        cards := []string{newCard(), "Ace of Diamonds"}

        after := start with a set of empty brackets, followed immediately by the data type that will be in the slice, and then brackets containing the elements to be found in the slice. Note that in the above example, a string is both created on the fly ("Ace of Diamonds") and created using a function (newCard() - we assume this funtion returns a string)
    To add elements to the cards slice:

        card = append(cards, "Six of Spades")

        note that append function does not modify the existing slice, but returns a new slice that we are then assigning back to the name "cards"

For loops
    for index, card := range cards{
        fmt.PrintIn(card)
    }

    after the "for" keyword, the next var will be assigned to the index of the current element, separated by a comma from the var assigned to the element itself. "range cards" tells the loop that we will be iterating over a slice/array called "cards". The body of the for loop will be run once for each element of the array.
    
    The := is used because technically each time the for loop iterates to the next element, it completely disregards the previous element and essentially starts from scratch. We are no reassigning "index" and "cards" each time, but they are created a new each iteration.



